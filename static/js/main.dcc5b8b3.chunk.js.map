{"version":3,"sources":["components/Statistics/StatisticItem.js","components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.js","components/Notification/Notification.js","components/App.js","index.js"],"names":["StatisticItem","label","value","Statistics","props","listItems","Object","entries","map","item","key","defaultProps","total","positive","FeedbackOptions","options","onLeaveFeedback","items","keys","type","onClick","Section","title","children","Notification","message","App","state","good","neutral","bad","countTotalFeedback","values","reduce","acc","countPositiveFeedbackPercentage","Math","round","addFeedback","setState","prevState","updateStatistics","this","Component","ReactDOM","render","document","getElementById"],"mappings":"kOAgBeA,EAbO,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,MAAV,OACpB,oCACE,4BACGD,EADH,KACYC,KCFVC,EAAa,SAAAC,GAEjB,IAAMC,EAAYC,OAAOC,QAAQH,GACjC,OACE,oCACE,4BACGC,EAAUG,KAAI,SAAAC,GACb,OACE,kBAAC,EAAD,CAAeC,IAAKD,EAAK,GAAIR,MAAOQ,EAAK,GAAIP,MAAOO,EAAK,WAarEN,EAAWQ,aAAe,CACxBC,MAAO,EACPC,SAAU,GAWGV,QCjBAW,EAlBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAC5BC,EAAQX,OAAOY,KAAKH,GAC1B,OACE,oCACGE,EAAMT,KAAI,SAAAC,GAAI,OACb,4BAAQC,IAAKD,EAAMU,KAAK,SAASC,QAAS,kBAAMJ,EAAgBP,KAC7DA,QCMIY,EAZC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,iCACE,4BAAKD,GACJC,ICOUC,EAVM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACnB,oCACE,2BAAIA,KCEaC,E,2MAiBnBC,MAAQ,CACNC,KAAM,EAAKxB,MAAMwB,KACjBC,QAAS,EAAKzB,MAAMyB,QACpBC,IAAK,EAAK1B,MAAM0B,K,EAGlBC,mBAAqB,WAAO,IAAD,EACM,EAAKJ,MAA5BC,EADiB,EACjBA,KAAMC,EADW,EACXA,QAASC,EADE,EACFA,IACvB,OAAOxB,OAAO0B,OAAO,CAAEJ,OAAMC,UAASC,QAAOG,QAC3C,SAACC,EAAKhC,GAAN,OAAgBgC,EAAMhC,IACtB,I,EAIJiC,gCAAkC,kBAChCC,KAAKC,MAAO,EAAKV,MAAMC,KAAO,EAAKG,qBAAwB,M,EAE7DO,YAAc,SAAAnB,GACZ,EAAKoB,UAAS,SAAAC,GAAS,sBACpBrB,EAAOqB,EAAUrB,GAAQ,O,EAI9BsB,iBAAmB,SAAAtB,GACjB,EAAKmB,YAAYnB,GACjB,EAAKY,qBACL,EAAKI,mC,wEAGG,IAAD,EACwBO,KAAKf,MAA5BC,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACjBlB,EAAQ8B,KAAKX,qBACblB,EAAW6B,KAAKP,kCAEtB,OACE,oCACE,kBAAC,EAAD,CAASb,MAAM,wBACb,kBAAC,EAAD,CACEP,QAAS2B,KAAKf,MACdX,gBAAiB0B,KAAKD,oBAG1B,kBAAC,EAAD,CAASnB,MAAM,cACXV,EAGA,kBAAC,EAAD,CACEgB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLlB,MAAOA,EACPC,SAAUA,IAPZ,kBAAC,EAAD,CAAcY,QAAQ,4B,GA7DDkB,aAAZjB,EACZf,aAAe,CACpBiB,KAAM,EACNC,QAAS,EACTC,IAAK,GCPTc,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.dcc5b8b3.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst StatisticItem = ({ label, value }) => (\r\n  <>\r\n    <li>\r\n      {label}: {value}\r\n    </li>\r\n  </>\r\n);\r\n\r\nStatisticItem.propTypes = {\r\n  label: PropTypes.string,\r\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n};\r\n\r\nexport default StatisticItem;\r\n","import React from 'react';\r\nimport StatisticItem from './StatisticItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Statistics = props => {\r\n  // const { good, neutral, bad, total, positive } = props;\r\n  const listItems = Object.entries(props);\r\n  return (\r\n    <>\r\n      <ul>\r\n        {listItems.map(item => {\r\n          return (\r\n            <StatisticItem key={item[0]} label={item[0]} value={item[1]} />\r\n          );\r\n        })}\r\n        {/* <StatisticItem label=\"Good\" value={good} />\r\n        <StatisticItem label=\"Neutral\" value={neutral} />\r\n        <StatisticItem label=\"Bad\" value={bad} />\r\n        <StatisticItem label=\"Total\" value={total} />\r\n        <StatisticItem label=\"Positive feedback\" value={`${positive}%`} /> */}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nStatistics.defaultProps = {\r\n  total: 0,\r\n  positive: 0,\r\n};\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number,\r\n  neutral: PropTypes.number,\r\n  bad: PropTypes.number,\r\n  total: PropTypes.number,\r\n  positive: PropTypes.number,\r\n};\r\n\r\nexport default Statistics;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  const items = Object.keys(options);\r\n  return (\r\n    <>\r\n      {items.map(item => (\r\n        <button key={item} type=\"button\" onClick={() => onLeaveFeedback(item)}>\r\n          {item}\r\n        </button>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.object,\r\n  onLeaveFeedback: PropTypes.func,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children }) => (\r\n  <section>\r\n    <h2>{title}</h2>\r\n    {children}\r\n  </section>\r\n);\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Section;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => (\r\n  <>\r\n    <p>{message}</p>\r\n  </>\r\n);\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string,\r\n};\r\n\r\nexport default Notification;\r\n","import React, { Component } from 'react';\r\nimport Statistics from './Statistics';\r\nimport FeedbackOptions from './FeedbackOptions';\r\nimport Section from './Section';\r\nimport Notification from './Notification';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class App extends Component {\r\n  static defaultProps = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n\r\n  static propTypes = {\r\n    good: PropTypes.number,\r\n    neutral: PropTypes.number,\r\n    bad: PropTypes.number,\r\n    countTotalFeedback: PropTypes.func,\r\n    countPositiveFeedbackPercentage: PropTypes.func,\r\n    addFeedback: PropTypes.func,\r\n    updateStatistics: PropTypes.func,\r\n  };\r\n\r\n  state = {\r\n    good: this.props.good,\r\n    neutral: this.props.neutral,\r\n    bad: this.props.bad,\r\n  };\r\n\r\n  countTotalFeedback = () => {\r\n    const { good, neutral, bad } = this.state;\r\n    return Object.values({ good, neutral, bad }).reduce(\r\n      (acc, value) => acc + value,\r\n      0,\r\n    );\r\n  };\r\n\r\n  countPositiveFeedbackPercentage = () =>\r\n    Math.round((this.state.good / this.countTotalFeedback()) * 100);\r\n\r\n  addFeedback = type => {\r\n    this.setState(prevState => ({\r\n      [type]: prevState[type] + 1,\r\n    }));\r\n  };\r\n\r\n  updateStatistics = type => {\r\n    this.addFeedback(type);\r\n    this.countTotalFeedback();\r\n    this.countPositiveFeedbackPercentage();\r\n  };\r\n\r\n  render() {\r\n    const { good, neutral, bad } = this.state;\r\n    const total = this.countTotalFeedback();\r\n    const positive = this.countPositiveFeedbackPercentage();\r\n\r\n    return (\r\n      <>\r\n        <Section title=\"Plese leave feedback\">\r\n          <FeedbackOptions\r\n            options={this.state}\r\n            onLeaveFeedback={this.updateStatistics}\r\n          />\r\n        </Section>\r\n        <Section title=\"Statistics\">\r\n          {!total ? (\r\n            <Notification message=\"No feedback given\" />\r\n          ) : (\r\n            <Statistics\r\n              good={good}\r\n              neutral={neutral}\r\n              bad={bad}\r\n              total={total}\r\n              positive={positive}\r\n            />\r\n          )}\r\n        </Section>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App.js';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}